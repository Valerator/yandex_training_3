// В игре в пьяницу карточная колода раздается поровну двум игрокам. Далее они вскрывают по одной верхней карте, и тот, чья карта старше, забирает себе обе 
// вскрытые карты, которые кладутся под низ его колоды. Тот, кто остается без карт – проигрывает. Для простоты будем считать, что все карты различны по 
// номиналу, а также, что самая младшая карта побеждает самую старшую карту ("шестерка берет туза"). Игрок, который забирает себе карты, сначала кладет под 
// низ своей колоды карту первого игрока, затем карту второго игрока (то есть карта второго игрока оказывается внизу колоды). Напишите программу, которая 
// моделирует игру в пьяницу и определяет, кто выигрывает. В игре участвует 10 карт, имеющих значения от 0 до 9, большая карта побеждает меньшую, карта со 
// значением 0 побеждает карту 9.

// Формат ввода
// Программа получает на вход две строки: первая строка содержит 5 чисел, разделенных пробелами — номера карт первого игрока, вторая – аналогично 5 карт 
// второго игрока. Карты перечислены сверху вниз, то есть каждая строка начинается с той карты, которая будет открыта первой.

// Формат вывода
// Программа должна определить, кто выигрывает при данной раздаче, и вывести слово first или second, после чего вывести количество ходов, сделанных до 
// выигрыша. Если на протяжении 106 ходов игра не заканчивается, программа должна вывести слово botva.

#include <iostream>
#include <deque>

void filling(std::deque<unsigned> &q) {
    for(int i = 0; i < 5; i++) {
        unsigned x;
        std::cin >> x;
        q.push_back(x);
    }
}

void foo(std::deque<unsigned> &q_1, std::deque<unsigned> &q_2, unsigned &n) {
	unsigned a, b;
    while (!q_1.empty() && !q_2.empty()) {
		if (q_1.empty() || q_2.empty()) 
			break;
		if (n == 1000000)  
			break; 
		a = q_1.front(); b = q_2.front();
		if ((a == 0 || b == 0) && (a == 9 || b == 9)) {
			if (a == 0) { 
				q_1.push_back(q_1.front()); 
				q_1.push_back(q_2.front()); 
				q_2.pop_front(); 
				q_1.pop_front(); 
			} else {
				q_2.push_back(q_1.front()); 
				q_2.push_back(q_2.front()); 
				q_1.pop_front(); 
				q_2.pop_front();
			}
		} else {
			if (a > b) {
				q_1.push_back(q_1.front()); 
				q_1.push_back(q_2.front()); 
				q_2.pop_front(); 
				q_1.pop_front();
			} else {
				q_2.push_back(q_1.front()); 
				q_2.push_back(q_2.front()); 
				q_1.pop_front(); 
				q_2.pop_front();
			}
		}
		n++;
	}
} 

int main() {
	std::deque <unsigned> first;
	std::deque <unsigned> second;

	filling(first);
    filling(second);

	unsigned n = 0;
	foo(first, second, n);

	if(n == 1000000)  
		std::cout << "botva";
	else if(first.empty())
		std::cout << "second "<< n;
	else
		std::cout << "first "<< n;
}
