# Для того чтобы компьютеры поддерживали актуальное время, они могут обращаться к серверам точного времени SNTP (Simple Network Time Protocol). К сожалению, 
# компьютер не может просто получить время у сервера, потому что информация по сети передаётся не мгновенно: пока сообщение с текущим временем дойдёт до 
# компьютера, оно потеряет свою актуальность. Протокол взаимодействия клиента (компьютера, запрашивающего точное время) и сервера (компьютера, выдающего 
# точное время) выглядит следующим образом:

# 1. Клиент отправляет запрос на сервер и запоминает время отправления A (по клиентскому времени).

# 2. Сервер получает запрос в момент времени B (по точному серверному времени) и отправляет клиенту сообщение, содержащее время B.

# 3. Клиент получает ответ на свой запрос в момент времени C (по клиентскому времени) и запоминает его. Теперь клиент, из предположения, что сетевые задержки
# при передаче сообщений от клиента серверу и от сервера клиенту одинаковы, может определить и установить себе точное время, используя известные значения A, 
# B, C.

# Вам предстоит реализовать алгоритм, с точностью до секунды определяющий точное время для установки на клиенте по известным A, B и C. При необходимости
# округлите результат до целого числа секунд по правилам арифметики (в меньшую сторону, если дробная часть числа меньше 1/2, иначе в большую сторону).

# Возможно, что, пока клиент ожидал ответа, по клиентскому времени успели наступить новые сутки, однако известно, что между отправкой клиентом запроса и 
# получением ответа от сервера прошло менее 24 часов.

# Формат ввода
# Программа получает на вход три временные метки A, B, C, по одной в каждой строке. Все временные метки представлены в формате «hh:mm:ss», где «hh» – это 
# часы, «mm» – минуты, «ss» – секунды. Часы, минуты и секунды записываются ровно двумя цифрами каждое (возможно, с дополнительными нулями в начале числа).

# Формат вывода
# Программа должна вывести одну временную метку в формате, описанном во входных данных, – вычисленное точное время для установки на клиенте. В выводе не 
# должно быть пробелов, пустых строк в начале вывода.

from collections import namedtuple

Timestamp = namedtuple('Timestamp', ['h', 'm', 's'])

Timestamp.__str__ = lambda self: "{h:02}:{m:02}:{s:02}".format(h=self.h, m=self.m, s=self.s)

def get_timestamp(s):
	slices = ((0, 2), (3, 5), (6, 9),)
	return Timestamp(*(int(s[l:r]) for l, r in slices))

SECS_IN_MINUTE = 60

SECS_IN_HOUR = SECS_IN_MINUTE * 60

SECS_IN_DAY = SECS_IN_HOUR * 24

def get_seconds(t):

	ret = t.h * SECS_IN_HOUR

	ret += t.m * SECS_IN_MINUTE

	ret += t.s

	return ret

Timestamp.__int__ = get_seconds

def get_timestamp_from_seconds(secs):

	h = secs // SECS_IN_HOUR

	h %= 24
	
	secs %= SECS_IN_HOUR

	m = secs // SECS_IN_MINUTE

	secs %= SECS_IN_MINUTE

	s = secs

	return Timestamp(h, m, s)

A, B, C = [int(get_timestamp(input())) for _ in range(3)]

tm2 = 2*B + (C-A) % SECS_IN_DAY

tm = tm2 // 2 + tm2 % 2

tm = get_timestamp_from_seconds(tm)

print(tm)
