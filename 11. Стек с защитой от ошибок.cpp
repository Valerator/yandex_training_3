// Научитесь пользоваться стандартной структурой данных stack для целых чисел. Напишите программу, содержащую описание стека и моделирующую работу стека, 
// реализовав все указанные здесь методы. Программа считывает последовательность команд и в зависимости от команды выполняет ту или иную операцию. После 
// выполнения каждой команды программа должна вывести одну строчку. Возможные команды для программы:

// push n
// Добавить в стек число n (значение n задается после команды). Программа должна вывести ok.

// pop
// Удалить из стека последний элемент. Программа должна вывести его значение.

// back
// Программа должна вывести значение последнего элемента, не удаляя его из стека.

// size
// Программа должна вывести количество элементов в стеке.

// clear
// Программа должна очистить стек и вывести ok.

// exit
// Программа должна вывести bye и завершить работу.

// Перед исполнением операций back и pop программа должна проверять, содержится ли в стеке хотя бы один элемент. Если во входных данных встречается операция
// back или pop, и при этом стек пуст, то программа должна вместо числового значения вывести строку error.

// Формат ввода
// Вводятся команды управления стеком, по одной на строке

// Формат вывода
// Программа должна вывести протокол работы стека, по одному сообщению на строке

#include <iostream>
#include <stack>
#include <string>

class Stack{
private:

    std::stack<int> _st;

public:
    
    Stack() {}

    void push(int n) {
        _st.push(n);
        std::cout << "ok" << std::endl;
    }

    void pop() {
        if(_st.empty()) {
            std::cout << "error" << std::endl;
        } else {
            std::cout << _st.top() << std::endl;
            _st.pop();
        }
    }

    void back() {
        if(_st.empty()) {
            std::cout << "error" << std::endl;
        } else {
            std::cout << _st.top() << std::endl;
        }
    }

    void size() {
        std::cout << _st.size() << std::endl;;
    }

    void clear() {
        _st = std::stack<int>();
        std::cout << "ok" << std::endl;
    }

    void exit() {
        std::cout << "bye" << std::endl;
        std::exit(0);
    }
    
};

int main() {
    std::string s;
    Stack st;
    while (std::cin >> s) {
        if(s == "push") {
            int x;
            std::cin >> x;
            st.push(x);
        }
        if(s == "pop") {
            st.pop();
        }
        if(s == "back") {
            st.back();
        }
        if(s == "size") {
            st.size();
        }
        if(s == "clear") {
            st.clear();
        }
        if(s == "exit") {
            st.exit();
        }
    }
}

