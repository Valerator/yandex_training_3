// Вовочка ломает систему безопасности Пентагона. Для этого ему понадобилось узнать, какие символы в секретных зашифрованных посланиях употребляются чаще 
// других. Для удобства изучения Вовочка хочет получить графическое представление встречаемости символов. Поэтому он хочет построить гистограмму количества 
// символов в сообщении. Гистограмма — это график, в котором каждому символу, встречающемуся в сообщении хотя бы один раз, соответствует столбик, высота 
// которого пропорциональна количеству этих символов в сообщении.

// Формат ввода
// Входной файл содержит зашифрованный текст сообщения. Он содержит строчные и прописные латинские буквы, цифры, знаки препинания («.», «!», «?», «:», 
// «-», «,», «;», «(», «)»), пробелы и переводы строк. Размер входного файла не превышает 10000 байт. Текст содержит хотя бы один непробельный символ. 
// Все строки входного файла не длиннее 200 символов.Для каждого символа c кроме пробелов и переводов строк выведите столбик из символов «#», количество 
// которых должно быть равно количеству символов c в данном тексте. Под каждым столбиком напишите символ, соответствующий ему. Отформатируйте гистограмму 
// так, чтобы нижние концы столбиков были на одной строке, первая строка и первый столбец были непустыми. Не отделяйте столбики друг от друга. Отсортируйте 
// столбики в порядке увеличения кодов символов.

// Формат вывода
// Для каждого символа c кроме пробелов и переводов строк выведите столбик из символов «#», количество которых должно быть равно количеству символов c в 
// данном тексте. Под каждым столбиком напишите символ, соответствующий ему. Отформатируйте гистограмму так, чтобы нижние концы столбиков были на одной 
// строке, первая строка и первый столбец были непустыми. Не отделяйте столбики друг от друга. Отсортируйте столбики в порядке увеличения кодов символов.

#include <iostream>
#include <map>

void filling(std::map<char, unsigned int> &m, const char &x) {
    m[x] += 1;
}

unsigned int max1(const std::map<char, unsigned int> &m) {
    auto it = m.begin();
    unsigned int max_ = 0;
    for(size_t i = 0; it != m.end(); i++, it++) {
        if(it->second > max_) {
            max_ = it->second;
        }
    }
    return max_;
}

void ans(const std::map<char, unsigned int> &m) {
    unsigned int max_1 = max1(m);
    size_t i = 0;
    for(i; i < max_1; i++) {
        size_t j = 0;
        auto it = m.begin();
        for(j; it != m.end(); it++, j++) {
            if(it->second >= max_1 - i) {
                std::cout << "#";
            } else {
                std::cout << " ";
            }
        }
        std::cout << std::endl;
    }
}

void print(const std::map<char, unsigned int> &m) {
    auto it = m.begin();
    for(size_t i = 0; it != m.end(); i++, it++) {
        std::cout << it->first;
    }
    std::cout << std::endl;
}

int main() {
    char x;
    std::map<char, unsigned int> m;
    while(std::cin >> x) {
        filling(m, x);
    }
    ans(m);
    print(m);
}

