// Научитесь пользоваться стандартной структурой данных queue для целых чисел. Напишите программу, содержащую описание очереди и моделирующую работу очереди, 
// реализовав все указанные здесь методы. 

// Программа считывает последовательность команд и в зависимости от команды выполняет ту или иную операцию. После выполнения каждой команды программа должна
// вывести одну строчку.

// Возможные команды для программы:

// push n
// Добавить в очередь число n (значение n задается после команды). Программа должна вывести ok.

// pop
// Удалить из очереди первый элемент. Программа должна вывести его значение.

// front
// Программа должна вывести значение первого элемента, не удаляя его из очереди.

// size
// Программа должна вывести количество элементов в очереди.

// clear
// Программа должна очистить очередь и вывести ok.

// exit
// Программа должна вывести bye и завершить работу.

// Перед исполнением операций front и pop программа должна проверять, содержится ли в очереди хотя бы один элемент. Если во входных данных встречается 
// операция front или pop, и при этом очередь пуста, то программа должна вместо числового значения вывести строку error.

// Формат ввода
// Вводятся команды управления очередью, по одной на строке

// Формат вывода
// Требуется вывести протокол работы очереди, по одному сообщению на строке

#include <iostream>
#include <queue>

class Queue{
private:

    std::queue<int> _q;

public:
    
    Queue() {}

    void push(int n) {
        _q.push(n);
        std::cout << "ok" << std::endl;
    }

    void pop() {
        if(_q.empty()) {
            std::cout << "error" << std::endl;
        } else {
            std::cout << _q.front() << std::endl;
            _q.pop();
        }
    }

    void front() {
        if(_q.empty()) {
            std::cout << "error" << std::endl;
        } else {
            std::cout << _q.front() << std::endl;
        }
    }

    void size() {
        std::cout << _q.size() << std::endl;;
    }

    void clear() {
        _q = std::queue<int>();
        std::cout << "ok" << std::endl;
    }

    void exit() {
        std::cout << "bye" << std::endl;
        std::exit(0);
    }
    
};

int main() {
    std::string s;
    Queue st;
    while (std::cin >> s) {
        if(s == "push") {
            int x;
            std::cin >> x;
            st.push(x);
        }
        if(s == "pop") {
            st.pop();
        }
        if(s == "front") {
            st.front();
        }
        if(s == "size") {
            st.size();
        }
        if(s == "clear") {
            st.clear();
        }
        if(s == "exit") {
            st.exit();
        }
    }
}
