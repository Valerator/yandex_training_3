// В неориентированном графе требуется найти минимальный путь между двумя вершинами.

// Формат ввода
// Первым на вход поступает число N – количество вершин в графе (1 ≤ N ≤ 100). Затем записана матрица смежности (0 обозначает отсутствие ребра, 1 – 
// наличие ребра). Далее задаются номера двух вершин – начальной и конечной.

// Формат вывода
// Выведите сначала L – длину кратчайшего пути (количество ребер, которые нужно пройти), а потом сам путь. Если путь имеет длину 0, то его выводить не 
// нужно, достаточно вывести длину.

// Необходимо вывести путь (номера всех вершин в правильном порядке). Если пути нет, нужно вывести -1.


#include<iostream>
#include<queue>
#include<vector>
#include<stack>

using namespace std;

int main() {
    int n, i, j, k, f, s;
    queue<int> q;
    cin >> n;
    int a[n][n], d[n], p[n];
    for (i = 0; i < n; ++i) {
        d[i] = 1000000000;
        for (j = 0; j < n; ++j) {
            cin >> a[i][j];
        }
    }
    cin >> s >> f;
	if(s > n || f > n) {
		cout << -1;
		return 0;
	}
    s--;
    f--;
    d[s] = 0;
    p[s] = -1;
    q.push(s);
    while (!q.empty()) {
        i = q.front();
        q.pop();
        for (j = 0; j < n; ++j) {
            if (a[i][j] && d[j] > d[i] + 1) {
                d[j] = d[i] + 1;
                p[j] = i;
                q.push(j);
            }
        }
    }
    if (d[f] < 1000000000) {
        cout << d[f] << endl;
		if(d[f] != 0) {
        	stack<int> path;
        	j = f;
        	while (j != -1) {
            	path.push(j);
            	j = p[j];
        	}
        	while (!path.empty()) {
            	cout << path.top() + 1 << " ";
            	path.pop();
        	}
        	cout << endl;
    	}
	} else {
        	cout << -1 << endl;
    }
    return 0;
}




